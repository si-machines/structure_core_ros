#!/usr/bin/env python
PACKAGE = "structure_core"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("frameSyncEnabled", bool_t, 0, "", True)
gen.add("lowLatencyIMU", bool_t, 0, "Set to True to deliver IMU events on a separate, dedicated background thread. Only supported for Structure Core, currently.", True)
gen.add("applyExpensiveCorrection", bool_t, 0, "Set to True to apply a correction filter to the depth before streaming. This may effect performance.", True)
gen.add("depthEnabled", bool_t, 0, "Set to True to enable depth streaming.", True)
gen.add("infraredEnabled", bool_t, 0, "Set to True to enable infrared streaming.", False)
gen.add("visibleEnabled", bool_t, 0, "Set to True to enable visible streaming.", True)
gen.add("accelerometerEnabled", bool_t, 0, "Set to True to enable accelerometer streaming.", False)
gen.add("gyroscopeEnabled", bool_t, 0, "Set to True to enable gyroscope streaming.", False)
# gen.add("depthResolution",  ST::StructureCoreDepthResolution::SXGA, "The target resolution for streamed depth frames. @see StructureCoreDepthResolution")
# gen.add("depthRangeMode",  ST::StructureCoreDepthRangeMode::Default, "The preset depth range mode for streamed depth frames. Modifies the min/max range of the depth values.")
# gen.add("infraredResolution",  ST::StructureCoreInfraredResolution::Default, "The target resolution for streamed depth frames. @see StructureCoreInfraredResolution Non-default infrared and visible resolutions are currently unavailable.")
# gen.add("visibleResolution",  ST::StructureCoreVisibleResolution::Default, "The target resolution for streamed visible frames. @see StructureCoreVisibleResolution Non-default infrared and visible resolutions are currently unavailable.")
gen.add("visibleApplyGammaCorrection", bool_t, 0, "Set to True to apply gamma correction to incoming visible frames.", True)
gen.add("infraredAutoExposureEnabled", bool_t, 0, "Enable auto-exposure for infrared frames.", True)
# gen.add("infraredMode",  ST::StructureCoreInfraredMode::BothCameras, "Specifies how to stream the infrared frames. @see StructureCoreInfraredMode")
# gen.add("imuUpdateRate",  ST::StructureCoreIMUUpdateRate::Default, "The target stream rate for IMU data. (gyro and accel)")
# gen.add("sensorSerial",  nullptr, "Serial number of sensor to stream. If null, the first connected sensor will be used.")
# gen.add("sensorInitializationTimeout",  6000, "Maximum amount of time (in milliseconds) to wait for a sensor to connect before throwing a timeout error.")
# gen.add("infraredFramerate",  15.f, "The target framerate for the infrared camera. If the value is not supported, the default is 30.")
gen.add("depthFramerate", int_t, 0, "The target framerate for the depth sensor. If the value is not supported, the default is 30.", 15, 0, 60)
# gen.add("visibleFramerate",   15.f, "The target framerate for the visible camera. If the value is not supported, the default is 30.")
# gen.add("initialVisibleExposure",  0.033f, "The initial visible exposure to start streaming with (milliseconds, but set in seconds).")
# gen.add("initialVisibleGain",  4.0f, "The initial visible gain to start streaming with. Can be any number between 1 and 8.")
# gen.add("initialInfraredExposure",  0.0146f, "The initial infrared exposure to start streaming with.")
# gen.add("initialInfraredGain",  3, "The initial infrared gain to start streaming with. Can be 0, 1, 2, or 3.")
gen.add("disableInfraredIntensityBalance", bool_t, 0, "Setting this to True will eliminate saturation issues, but might result in sparser depth.", True)
gen.add("latencyReducerEnabled", bool_t, 0, "f Setting this to True will reduce latency, but might drop more frame", False)
# gen.add("initialProjectorPower",  1.0f, "Laser projector power setting from 0.0 to 1.0 inclusive. Projector will only activate if required by streaming configuration.")


# gen.add("int_param",    int_t,    0, "An Integer parameter", 50,  0, 100)
# gen.add("double_param", double_t, 0, "A double parameter",    .5, 0,   1)
# gen.add("str_param",    str_t,    0, "A string parameter",  "Hello World")
# gen.add("bool_param",   bool_t,   0, "A Boolean parameter",  True)

# size_enum = gen.enum([ gen.const("Small",      int_t, 0, "A small constant"),
#                        gen.const("Medium",     int_t, 1, "A medium constant"),
#                        gen.const("Large",      int_t, 2, "A large constant"),
#                        gen.const("ExtraLarge", int_t, 3, "An extra large constant")],
#                      "An enum to set size")

# gen.add("size", int_t, 0, "A size parameter which is edited via an enum", 1, 0, 3, edit_method=size_enum)

exit(gen.generate(PACKAGE, "structure_driver", "StructureDriver"))
